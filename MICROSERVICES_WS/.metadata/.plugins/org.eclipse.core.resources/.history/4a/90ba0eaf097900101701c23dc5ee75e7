package com.example.user_service.config;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.nio.charset.StandardCharsets;
import java.util.Date;

@Component
public class JwtUtil {

    // Secret must be at least 32 characters for HS256
    private static final String SECRET_KEY = "replace_this_with_a_very_secure_and_long_secret_key_123456";
    private final SecretKey key = Keys.hmacShaKeyFor(SECRET_KEY.getBytes(StandardCharsets.UTF_8));

    // Token expiry: 10 hours
    private static final long JWT_EXPIRATION = 1000 * 60 * 60 * 10;

    /** Generate token for a username */
    public String generateToken(String username) {
        return Jwts.builder()
                .subject(username)  // In 0.12.x, use .subject()
                .issuedAt(new Date(System.currentTimeMillis()))
                .expiration(new Date(System.currentTimeMillis() + JWT_EXPIRATION))
                .signWith(key) // No SignatureAlgorithm param needed if key matches
                .compact();
    }

    /** Extract username from token */
    public String extractUsername(String token) {
        return extractAllClaims(token).getSubject();
    }

    /** Validate JWT token */
    public boolean validateToken(String token, String username) {
        String extractedUsername = extractUsername(token);
        return extractedUsername.equals(username) && !isTokenExpired(token);
    }

    /** Check expiry */
    private boolean isTokenExpired(String token) {
        return extractAllClaims(token).getExpiration().before(new Date());
    }

    /** Get claims from token */
    private Claims extractAllClaims(String token) {
        return Jwts.parser()              // parser() instead of parserBuilder() for 0.12.6
                .setSigningKey(key)       // Pass the SecretKey
                .build()                  // Required before parsing
                .parseClaimsJws(token)
                .getBody();
    }
}
